[{"/Users/sylvaincoutrot/astro-def-front/src/component/Definitions/DefinitionsBySubject.js":"1","/Users/sylvaincoutrot/astro-def-front/src/reportWebVitals.js":"2","/Users/sylvaincoutrot/astro-def-front/src/component/Definitions/Definitions.js":"3","/Users/sylvaincoutrot/astro-def-front/src/component/Subjects/Form.js":"4","/Users/sylvaincoutrot/astro-def-front/src/actions/instance.js":"5","/Users/sylvaincoutrot/astro-def-front/src/actions/definitions.js":"6","/Users/sylvaincoutrot/astro-def-front/src/index.js":"7","/Users/sylvaincoutrot/astro-def-front/src/App.js":"8","/Users/sylvaincoutrot/astro-def-front/src/component/Definitions/Form.js":"9","/Users/sylvaincoutrot/astro-def-front/src/component/Home/Home.js":"10","/Users/sylvaincoutrot/astro-def-front/src/component/Subjects/Subjects.js":"11","/Users/sylvaincoutrot/astro-def-front/src/actions/subjects.js":"12","/Users/sylvaincoutrot/astro-def-front/src/component/Home/UnloggedHome.js":"13"},{"size":4076,"mtime":1607551859391,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1606837796665,"results":"16","hashOfConfig":"15"},{"size":260,"mtime":1607119427227,"results":"17","hashOfConfig":"15"},{"size":1311,"mtime":1607132528185,"results":"18","hashOfConfig":"15"},{"size":161,"mtime":1606837830391,"results":"19","hashOfConfig":"15"},{"size":905,"mtime":1607112712942,"results":"20","hashOfConfig":"15"},{"size":288,"mtime":1607121863688,"results":"21","hashOfConfig":"15"},{"size":1749,"mtime":1607208006945,"results":"22","hashOfConfig":"15"},{"size":2970,"mtime":1607132147237,"results":"23","hashOfConfig":"15"},{"size":1966,"mtime":1607122717056,"results":"24","hashOfConfig":"15"},{"size":1325,"mtime":1607132551636,"results":"25","hashOfConfig":"15"},{"size":438,"mtime":1606837830392,"results":"26","hashOfConfig":"15"},{"size":1945,"mtime":1607254612809,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"jv62wy",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"37"},"/Users/sylvaincoutrot/astro-def-front/src/component/Definitions/DefinitionsBySubject.js",["63","64"],"import React, { useEffect, useState } from 'react';\nimport { getDefinitionsFromSubject, deleteDefinition } from '../../actions/definitions';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Card from 'react-bootstrap/Card';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport { useParams } from \"react-router-dom\";\n\nexport default () => {\n    const { name } = useParams();\n    const [definitions, setDefinitions] = useState(null);\n    const [alert, setAlert] = useState('');\n    const [variant, setVariant] = useState('success');\n    const [currentDef, setCurrentDef] = useState(null);\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = def => {\n        setShow(true);\n        setCurrentDef(def);\n    }\n    useEffect(() => {\n        const fetchDefBySubject = async () => {\n            const { data } = await getDefinitionsFromSubject(name);\n            setDefinitions(data);\n        }\n        fetchDefBySubject();\n    }, []);\n    const deleteDef = async (id, name) => {\n        const res = await deleteDefinition(id);\n        if (res.data) {\n            setAlert(`Definition ${name} deleted`);\n        } else {\n            setVariant('danger');\n            setAlert(`Definition ${name} not deleted : ${res.message}`);\n        };\n        setDefinitions(definitions.filter(item => item.name !== name));\n        handleClose();\n    }\n\n    return (\n        <>\n            <div  style={{padding: '10px', paddingRight: '170px', paddingLeft: '170px'}}>\n            <h1 style={{color: 'white'}}>{name}</h1>\n                {definitions ?\n                    <>\n                        <div style={{display: 'flex', flexDirection: 'row', flexWrap: 'wrap'}}>\n                            {definitions.map((definition, key) => (\n                            <>\n                                <Card key={key} style={{ width: '100rem', marginBottom: '25px', marginTop: '25px' }}>\n                                <Card.Header className=\"text-center\" ><b>{definition.name}</b></Card.Header>\n                                <Card.Body>\n                                            {definition.content.split(\"\\n\").map(line => (<Card.Text>{line}</Card.Text>))}\n                                        <Button\n                                            variant=\"danger\"\n                                            onClick={() => handleShow(definition)}>\n                                            Delete \"{definition.name}\"\n                                        </Button>\n                                </Card.Body>\n                                    </Card>\n\n                </>))}\n                                    <Modal key={`modal`} show={show} onHide={handleClose}>\n                                        <Modal.Header closeButton>\n                                        <Modal.Title>Are you sure ?</Modal.Title>\n                                        </Modal.Header>\n                                        <Modal.Body>If you delete this definition it'll be no way to get it back</Modal.Body>\n                                        <Modal.Footer>\n                                        <Button variant=\"secondary\" onClick={handleClose}>\n                                            Cancel\n                                        </Button>\n                                        <Button variant=\"danger\" onClick={() =>\n                                                deleteDef(currentDef._id, currentDef.name)}>\n                                                Delete\n                                        </Button>\n                                        </Modal.Footer>\n                                    </Modal>\n                        </div>\n                            {alert && <Alert key=\"deleted\" variant={variant}>\n                                {alert}\n                            </Alert>}\n                    </>:\n                        <Spinner animation=\"border\" />}\n            </div>\n        </>\n    )};","/Users/sylvaincoutrot/astro-def-front/src/reportWebVitals.js",[],["65","66"],"/Users/sylvaincoutrot/astro-def-front/src/component/Definitions/Definitions.js",["67"],"import React from 'react';\nimport DefinitionForm from './Form';\n\nexport default () => (\n        <>\n            <div style={{padding: '10px', paddingRight: '170px', paddingLeft: '170px'}}>\n                <DefinitionForm />\n            </div>\n        </>\n    );",["68","69"],"/Users/sylvaincoutrot/astro-def-front/src/component/Subjects/Form.js",["70"],"import React, { useState } from 'react';\nimport { postSubject } from '../../actions/subjects';\nimport { useFormik } from 'formik';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nexport default () => {\n   const formik = useFormik({\n     initialValues: {\n        name: ''\n     },\n     onSubmit: async (values) => {\n       const response = await postSubject(values);\n       setNewSubject(response.data.name);\n       resetForm({});\n     },\n   });\n  const {\n    values,\n    handleChange,\n    handleSubmit,\n    resetForm\n  } = formik;\n    const [newSubject, setNewSubject] = useState('');\n\n    return (\n        <div>\n          <Form onSubmit={handleSubmit}>\n            <Form.Row>\n              <Form.Group as={Col} controlId=\"formGridName\">\n                <Form.Label style={{color: 'white'}}>Name</Form.Label>\n                <Form.Control name=\"name\" value={values.name} onChange={handleChange} placeholder=\"Subject\" />\n              </Form.Group>\n            </Form.Row>\n\n            <Button variant=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n        </Form>\n        {newSubject && <Button key=\"new\" variant=\"dark\" size=\"lg\" style={{ margin: '15px' }}>\n          {newSubject}\n        </Button>}\n  </div>\n)};\n","/Users/sylvaincoutrot/astro-def-front/src/actions/instance.js",[],"/Users/sylvaincoutrot/astro-def-front/src/actions/definitions.js",[],"/Users/sylvaincoutrot/astro-def-front/src/index.js",[],"/Users/sylvaincoutrot/astro-def-front/src/App.js",["71"],"/Users/sylvaincoutrot/astro-def-front/src/component/Definitions/Form.js",[],"/Users/sylvaincoutrot/astro-def-front/src/component/Home/Home.js",[],["72","73"],"/Users/sylvaincoutrot/astro-def-front/src/component/Subjects/Subjects.js",["74"],"import React, { useEffect, useState } from 'react';\nimport getSubjects from '../../actions/subjects';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport SubjectForm from './Form';\n\n\nexport default () => {\n    const [subjects, setSubjects] = useState(null);\n    useEffect(() => {\n        const fetchSubjects = async () => {\n            const { data } = await getSubjects();\n            setSubjects(data);\n        }\n        fetchSubjects();\n    }, [])\n\n    return (\n            <div  style={{padding: '10px', paddingRight: '170px', paddingLeft: '170px'}}>\n                {subjects ?\n                    <>\n                    <SubjectForm />\n                    <div style={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', marginTop: '100px' }}>\n                        {subjects.map((subject, key) =>\n                            <Button key={key} variant=\"dark\" size=\"lg\" style={{ margin: '15px' }} href={`/list/${subject.name}`}>\n                                {subject.name}\n                            </Button>)}\n                            </div>\n                    </>:\n                    <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </Spinner>}\n            </div>\n    )};",["75","76"],"/Users/sylvaincoutrot/astro-def-front/src/actions/subjects.js",[],"/Users/sylvaincoutrot/astro-def-front/src/component/Home/UnloggedHome.js",["77","78"],"import React from 'react';\nimport { useFormik } from 'formik';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { useCookies } from 'react-cookie';\n\nconst UnloggedHome = () => {\n  const [cookies, setCookie] = useCookies(['mln-astrodef']);\nconst formik = useFormik({\n     initialValues: {\n        token: ''\n     },\n  onSubmit: async (values) => {\n    if (values.token === process.env.REACT_APP_TOKEN) {\n       setCookie('mln-astrodef', values.token);\n    }\n\n    resetForm({});\n     },\n   });\n  const {\n    values,\n    handleChange,\n    handleSubmit,\n    resetForm\n  } = formik;\n\n  return (<>\n    <img style={{width: '10rem', height:'10rem', left: '50%', position:'fixed', transform: 'translate(-50%, 400%)'}}\n      src=\"https://icons-for-free.com/iconfiles/png/512/color+cinema+icons+Astronaut-1320567850764192548.png\"></img>\n        <h2 style={{color:'white', left: '50%', position:'fixed', transform: 'translate(-50%, 500%)'}}>Welcome to the secret Mln's astro def app,</h2>\n        <h2 style={{color:'white', left: '50%', position:'fixed', transform: 'translate(-50%, 600%)'}}>access is granted only to VIP astros.</h2>\n        <h2 style={{color:'white', left: '50%', position:'fixed', transform: 'translate(-50%, 700%)'}}>Have you a token ?</h2>\n        <div style={{width:'18rem',\n  position: 'fixed',\n  top: '50%',\n  left: '50%',\n        transform: 'translate(-50%, -50%)'\n      }}>\n          <Form onSubmit={handleSubmit}>\n            <Form.Row>\n              <Form.Group as={Col} controlId=\"formGridName\">\n                <Form.Control type=\"password\" name=\"token\" value={values.name} onChange={handleChange} placeholder=\"Token\" />\n              </Form.Group>\n            </Form.Row>\n\n            <Button variant=\"primary\" type=\"submit\" style={{}}>\n              Submit\n            </Button>\n        </Form>\n  </div>\n  </>\n)\n}\nexport default UnloggedHome;",{"ruleId":"79","severity":1,"message":"80","line":10,"column":1,"nodeType":"81","endLine":87,"endColumn":8},{"ruleId":"82","severity":1,"message":"83","line":29,"column":8,"nodeType":"84","endLine":29,"endColumn":10,"suggestions":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"79","severity":1,"message":"80","line":4,"column":1,"nodeType":"81","endLine":10,"endColumn":7},{"ruleId":"86","replacedBy":"90"},{"ruleId":"88","replacedBy":"91"},{"ruleId":"79","severity":1,"message":"80","line":8,"column":1,"nodeType":"81","endLine":45,"endColumn":4},{"ruleId":"92","severity":1,"message":"93","line":18,"column":19,"nodeType":"94","messageId":"95","endLine":18,"endColumn":28},{"ruleId":"86","replacedBy":"96"},{"ruleId":"88","replacedBy":"97"},{"ruleId":"79","severity":1,"message":"80","line":8,"column":1,"nodeType":"81","endLine":34,"endColumn":8},{"ruleId":"86","replacedBy":"98"},{"ruleId":"88","replacedBy":"99"},{"ruleId":"92","severity":1,"message":"100","line":9,"column":10,"nodeType":"94","messageId":"95","endLine":9,"endColumn":17},{"ruleId":"101","severity":1,"message":"102","line":30,"column":5,"nodeType":"103","endLine":31,"endColumn":111},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.","ArrayExpression",["104"],"no-native-reassign",["105"],"no-negated-in-lhs",["106"],["105"],["106"],"no-unused-vars","'setCookie' is assigned a value but never used.","Identifier","unusedVar",["105"],["106"],["105"],["106"],"'cookies' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"107","fix":"108"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [name]",{"range":"109","text":"110"},[1076,1078],"[name]"]